
package rtaclient;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

//import javax.sql.rowset.*;
import org.apache.commons.lang3.StringUtils;

import net.sf.jsqlparser.JSQLParserException;
import net.sf.jsqlparser.schema.Table;
import net.sf.jsqlparser.statement.select.Join;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.select.SelectBody;
import net.sf.jsqlparser.statement.select.SetOperationList;
import rtaclient.common.GlobalEnv;
import rtaclient.common.Log;
import rtaclient.db.DBConnect;
import rtaclient.db.GetData;
import rtaclient.parser.Parser;
import rtaclient.parser.Utils;

public class RTAClient {

    static String sql;
    static String tmpdate;
    static Parser parser;
    public static Select originalSelect,finalSelect;

    static Connection con_remote = null, con_tmp = null;
    static ResultSet rs_remote = null, rs_tmp = null;
    static PreparedStatement ps_remote = null, ps_tmp = null;
    static long start, end;
    static long sta, en;

    public static Boolean Flag = false;

    public static void main(String[] args) throws IOException, JSQLParserException {
        GlobalEnv.setGlobalEnv(args);

        Log.setLog(0 /* 0: Hide, 1: Show */);

        Scanner scan = new Scanner(System.in);
        do {
            System.out.print("rta> ");
            sql = scan.nextLine();
//          start = System.currentTimeMillis();
//          sql = "SELECT l.line_name AS l_line_name, l.line_cd AS l_line_cd, s.station_name AS s_station_name, s.line_cd AS s_line_cd FROM lines l, stations s WHERE l.line_cd = 11101 AND s.line_cd = l.line_cd;";
//          sql = "SELECT l.line_name, l.line_cd, s.station_name, s.line_cd FROM #lines l, #stations s WHERE l.line_cd = 11101 AND s.line_cd = l.line_cd;";
            // Experiments
//            sql = "SELECT i.i_id, i.i_name, s.s_quantity * i.i_price as total FROM stock1 s, #item5 i WHERE s.s_i_id = i.i_id AND MOD(i.i_id, 10) = 7";
            // stocks
//            sql = "SELECT u.id, u.name, SUM (us.number * s.ending_price) FROM users u, user_stocks us, #stocks s WHERE u.id = us.user_id AND us.code = s.code AND s.market = '東証2部' GROUP BY u.id, u.name;";
            // postal_code
//            sql = "SELECT u.id, u.name, u.postal_code, p.prefecture_name, p.city_name, p.address FROM users u, #postal_code p WHERE u.postal_code = p.code ORDER BY id;";
            // Remote Only
//            sql = "SELECT s.brand, s.opening_price, s.ending_price FROM #stocks s WHERE s.market = '東証1部';";
            // COUNT (*)
//            sql = "SELECT COUNT(*) FROM #stocks s WHERE s.market = '東証1部';";
            // UNION
//            sql = "(SELECT s.code, s.brand FROM #stocks s WHERE s.market = '東証2部') UNION (SELECT s2.code, s2.brand FROM #stocks s2 WHERE s2.market = '東証マザーズ');";
            // JOIN
//            sql = "SELECT u.id, u.name, p.prefecture_name, p.city_name, p.address FROM #postal_code p INNER JOIN users u ON p.code = u.postal_code;";
            // SubQuery
//            sql = "Select a from ((select b from #postal_code) join (select d from e) on c.m = e.m) join (Select f from g) on c.m = g.m;";

            while (!sql.endsWith(";")) {
                if (sql.endsWith("\\q") || sql.endsWith("exit") || sql.endsWith(".q")) {
                    System.out.println("Bye.");
                    scan.close();
                    return;
                }
                System.out.print("  -> ");
                sql += ' ' + scan.nextLine();
            }
            if (StringUtils.isBlank(sql)) {
                continue;
            }

            // テーブル名に使用する日付を取得
            Date date = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyMMddHHmmss");
            tmpdate = sdf.format(date);
            start = System.currentTimeMillis();
            try {
                parser = new Parser();
                if (parser.parse(sql, tmpdate) != -1) {
                    originalSelect = parser.getOriginalSelect();
                } else {
                    continue;
                }

            } catch (JSQLParserException e) {
                System.out.println("You have an error in your RTA query syntax.");
                continue;
            } catch (Exception e) {
                e.printStackTrace();
            }

            try {
            	// なければtmpDBを作成 kosaka 2017.10.08 備忘録
                QueryExecutor.createTmp();
            } catch (SQLException e) {
                // Duplicate Check for PostgreSQL
                if (!e.getSQLState().equals("42P04")) {
                    System.out.println("Cannot create tmp database with error: ");
                    e.printStackTrace();
                }
            }

            // Get From Remote Table
            List<TableConnector> remoteConnector = parser.getRemoteConnector();

            try {
            	remoteConnector = Utils.remoteConnectorJoin(parser,remoteConnector,tmpdate);
			} catch (JSQLParserException e1) {
				// TODO 自動生成された catch ブロック
				e1.printStackTrace();
			}

            List <ArrayList<TableConnector>> remoteConnector2 = new ArrayList <ArrayList<TableConnector>>();
            ArrayList<TableConnector> tmpConnector = new ArrayList<TableConnector>();

            for (int i=0;i<remoteConnector.size();i++) {
            	TableConnector tmp = remoteConnector.get(i);
            	tmpConnector.add(tmp);
            	for (int j=i+1;j<remoteConnector.size();j++) {
            		TableConnector tmp2 = remoteConnector.get(j);
            		if(tmp.getHost().equals(tmp2.getHost())){
            			tmpConnector.add(tmp2);
            		}
            	}
            	remoteConnector2.add(tmpConnector);
            }

            //TODO:remote同士の結合の場合、その２つのrcを結合(whereを見て)
            for (ArrayList<TableConnector> tcs : remoteConnector2) {
                try {
                    // true -> WebService, false -> Directly
                    Boolean getFromWebService = true;
                    if (getFromWebService) {
                    	String rs_json = "";
		                    //TODO:あとで直す tc.getAccessName()
	                    try {
	                    		rs_json = GetData.fromSQL(tcs,parser);
//	                    		rs_json = GetData.fromSQL2(tcs,parser);
						} catch (JSQLParserException e) {
							// TODO 自動生成された catch ブロック
							e.printStackTrace();
						}
	                    //System.out.println(rs_json);

                        // mock
//                        String rs_json = GetData.fromSQL("SELECT i.i_id, i.i_name, i.i_price from item5 i where MOD(i.i_id, 10) = 7", tc.getAccessName());
//                        String rs_json = GetData.fromSQL("SELECT i.i_id, i.i_name, i.i_price from item5 i where i.i_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000)", tc.getAccessName());
//                        String rs_json = GetData.fromSQL("SELECT i.i_id, i.i_name, i.i_price from item5 i where MOD(i.i_id, 10) = 7 AND i.i_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000)", tc.getAccessName());
//                        String rs_json = GetData.fromSQL("SELECT s.ending_price, s.code, s.market FROM stocks s WHERE market = '東証2部'", tc.getAccessName());
//                        String rs_json = GetData.fromSQL("SELECT s.ending_price, s.code, s.market FROM stocks s WHERE code IN ('1434-T', '2499-T', '1828-T', '2345-T', '2668-T', '6042-T', '6237-T', '6772-T', '6982-T', '7544-T', '9708-T', '9873-T', '9537-T', '8912-T', '7965-T')", tc.getAccessName());
	                    System.out.println("--- Local Insert START ---");
	                    QueryExecutor.insertFromJson(tcs, rs_json, tmpdate, false);
	                    System.out.println("--- Local Insert END ---");
//	                    for(int i=0;i<tcs.size();i++){
//	                    	Table table = (Table) tcs.get(0).getFromItems().get(0);
//                            changeTableTimestamp(parser.getOriginalSelect().getSelectBody(), table.getName());
//	                    }
                    } else {
//                        con_remote = DBConnect.connectVPN();
                    	for(int i=0;i<tcs.size();i++){
//                    		System.out.println(tcs.get(i).createConnector());
//                    		System.out.println(tcs.get(i).getUser());
//                    		System.out.println(tcs.get(i).getPassword());
                    		con_remote = DBConnect.connect(tcs.get(i).createConnector(), tcs.get(i).getUser(), tcs.get(i).getPassword());
                            con_tmp = DBConnect.connectLocalTmp();
                            String sql = Utils.addAlias(tcs.get(i).getSQL());
                            ps_remote = con_remote.prepareStatement(sql);
//                            System.out.println(sql);
                            // mock
//                            ps_remote = con_remote.prepareStatement("SELECT i.i_id, i.i_name, i.i_price from item5 i where MOD(i.i_id, 10) = 7");
//                            ps_remote = con_remote.prepareStatement("SELECT i.i_id, i.i_name, i.i_price from item5 i where i.i_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000)");
//                            ps_remote = con_remote.prepareStatement("SELECT i.i_id, i.i_name, i.i_price from item5 i where MOD(i.i_id, 10) = 7 and i.i_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000)");
//                            ps_remote = con_remote.prepareStatement("SELECT s.ending_price, s.code, s.market FROM stocks s WHERE market = '東証2部'");
//                            ps_remote = con_remote.prepareStatement("SELECT s.ending_price, s.code, s.market FROM stocks s WHERE code IN ('1434-T', '2499-T', '1828-T', '2345-T', '2668-T', '6042-T', '6237-T', '6772-T', '6982-T', '7544-T', '9708-T', '9873-T', '9537-T', '8912-T', '7965-T')");
                            rs_remote = ps_remote.executeQuery();
                            QueryExecutor.insertFromResultSet(tcs.get(i), con_tmp, rs_remote, tmpdate, false /* 一時的な結果 */);
                         // Add timestamp to finalSelect Table Name
                            // TODO: ２つのテーブルの結合結果は１つのテーブルとして、ローカルに保存する事になるからクエリを要変更。
//                            Table table = (Table) tcs.get(0).getFromItems().get(0);
//                            changeTableTimestamp(parser.getOriginalSelect().getSelectBody(), table.getName());
                    	}
                    }
                } catch (SQLException | ClassNotFoundException e) {
                    System.out.println("Error executing Remote query:");
                    e.printStackTrace();
                } finally {
                    DBConnect.close(con_remote);
                }
            }

//            System.out.println("Flag:"+Flag);

            if(!Flag){
//            	System.out.println("実行されてるよーーー");
            	Utils.createFinalSelect(parser,remoteConnector,tmpdate);
            }


            // Execute originalQuery
            try {
                switch (GlobalEnv.getDriver()) {
                    case "mysql":
                        con_tmp = DBConnect.connectLocalTmp();
                        break;
                    case "postgresql":
                        con_tmp = DBConnect.connectLocal();
                        break;
                    case "sqlite":
                        con_tmp = DBConnect.connectLocalTmp();
                        Statement s = con_tmp.createStatement();
                        s.execute("ATTACH \"" + GlobalEnv.getDb() + "\" as local");
                }

                if(finalSelect == null){
                	sql = parser.getOriginalSelect().toString();
                }else{
                	sql = finalSelect.toString();
                }

//                Log.out("FinalQuery: " + sql);

                System.out.println("FinalQuery: " + sql);
                ps_tmp = con_tmp.prepareStatement(sql);
                rs_tmp = ps_tmp.executeQuery();

                //DBTablePrinter.printResultSet(rs_tmp);
                // SQLite only supports TYPE_FORWARD_ONLY cursors
                rs_tmp = ps_tmp.executeQuery();

                end = System.currentTimeMillis();
                Log.out((end - start) + " ms");
                System.out.println("終了:"+(end - start) + " ms");

                QueryExecutor.insertFromResultSet(GlobalEnv.getDriver(), con_tmp, rs_tmp, tmpdate, true /* Original Query */);


            } catch (SQLException | ClassNotFoundException e) {
                e.printStackTrace();
            } finally {
                DBConnect.close(con_tmp);
            }
        } while (true);

    }


    public static SelectBody changeTableTimestamp(SelectBody sb, String tbName) {
        switch (sb.getClass().getSimpleName()) {
            case "SetOperationList":
                SetOperationList sol = (SetOperationList) sb;
                List<SelectBody> sbs = sol.getSelects();
                for (SelectBody selectBody : sbs) {
                    changeTableTimestamp(selectBody, tbName);
                }
                break;

            case "PlainSelect":
                PlainSelect pl = (PlainSelect) sb;

                Table tb = (Table) pl.getFromItem();
                List<Join> joins = pl.getJoins();

                if (tbName.equals(tb.getName())) {
                    tb.setName(tb.getName() + "_" + tmpdate);
                    // PostgreSQLの場合schemaをset
                    if (GlobalEnv.getDriver().equals("postgresql")) {
                        tb.setSchemaName(GlobalEnv.getTmpdb());
                    }
                }

                if (joins != null) {
                    for (Join j : joins) {
                        Table t = (Table) j.getRightItem();
                        if (tbName.equals(t.getName())) {
                            t.setName(t.getName() + "_" + tmpdate);
                            // PostgreSQLの場合schemaをset
                            if (GlobalEnv.getDriver().equals("postgresql")) {
                                t.setSchemaName(GlobalEnv.getTmpdb());
                            }
                        }
                    }
                }
                break;

            case "WithItem":
                // TODO: Implement WITH clause.
                break;
        }
		return sb;
    }
}
